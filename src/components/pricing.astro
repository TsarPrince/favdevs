---
// @ts-ignore
import { Icon } from "astro-icon/components";
import Link from "@components/ui/link.astro";
const { plan } = Astro.props;
---

<div>
  <div
    class:list={[
      "flex flex-col w-full order-first lg:order-none border py-5 px-6 relative rounded-lg",
      plan.popular
        ? "  border-orange-500 shadow-lg shadow-orange-50"
        : " border-neutral-200 shadow-sm",
    ]}>
    {
      plan.popular && (
        <span class="inline-flex absolute px-3 py-1 text-xs -top-3 left-1/2 -translate-x-1/2 font-medium rounded-full bg-gradient-to-r from-red-500 to-orange-500 text-white ">
          Popular
        </span>
      )
    }

    <div class="">
      <h3 class:list={[plan.popular ? "text-orange-700" : "text-indigo-600"]}>
        {plan.name}
      </h3><p class="mt-2 text-black">
        {
          plan.price ? (
            <span class="flex items-baseline">
              <span class=""> $</span>
              <span class="font-bold text-2xl  md:text-4xl"> {plan.price}</span>
              <span class="ml-1 text-neutral-600">
                {" "}
                /{plan.cycle == "monthly" ? "month" : "year"}
              </span>
            </span>
          ) : (
            <span class="font-bold text-2xl  md:text-4xl"> Custom</span>
          )
        }
      </p>

      <p class="mt-3 text-sm text-neutral-500">{plan.description}</p>
    </div><ul class="grid mt-8 text-left gap-y-4">
      {
        plan.features.map((item) => (
          <li class="flex items-center gap-3 text-neutral-800">
            <Icon name="ph:check-circle-fill" class="w-5 h-5" />

            <span class="text-sm">{item}</span>
          </li>
        ))
      }
    </ul><div class="flex mt-8">
      {
        plan.cycle == "custom" ? (
          <Link
            href={"/contact"}
            block
            style={plan.popular ? "primary" : "outline"}>
            Contact Us
          </Link>
        ) : (
          <button
            class:list={[
              "stripe-checkout",
              "flex justify-center items-center disabled:opacity-80 px-7 py-2.5 w-full rounded-full text-center transition focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:ring-indigo-500 focus-visible:outline-none focus-visible:shadow-outline-indigo",
              plan.popular
                ? "bg-indigo-600 text-white hover:bg-indigo-800"
                : "bg-white border-2 border-indigo-500 hover:bg-indigo-50 text-indigo-600",
            ]}
            data-price-id={plan.priceId}>
            <svg
              class:list={[
                "motion-reduce:hidden animate-spin -ml-1 mr-3 h-5 w-5 py-1 hidden",
                plan.popular ? "text-white" : "text-indigo-700",
              ]}
              fill="none"
              viewBox="0 0 24 24">
              <circle
                class="opacity-25"
                cx="12"
                cy="12"
                r="10"
                stroke="currentColor"
                stroke-width="4"
              />
              <path
                class="opacity-75"
                fill="currentColor"
                d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
              />
            </svg>
            <span>Get Started</span>
          </button>
        )
      }
    </div>
  </div>
</div>

<script>
  import getStripe from "@lib/stripe";
  const stripe = await getStripe();

  if (stripe) {
    const checkoutBtns =
      document.querySelectorAll<HTMLButtonElement>(".stripe-checkout");

    checkoutBtns?.forEach((btn) => {
      btn.addEventListener("click", async () => {
        // disable button
        btn.disabled = true;
        btn.querySelector("span")?.classList.toggle("hidden");
        btn.querySelector("svg")?.classList.toggle("hidden");

        // send request to server for redirect url
        const priceId = btn.dataset.priceId;
        if (priceId) {
          console.log({ priceId });
          const response = await fetch(`/checkout/${priceId}`, {
            method: "GET",
            headers: {
              "Content-Type": "application/json",
            },
          });

          const { session } = await response.json();
          console.log(session);

          // When the customer clicks on the button, redirect them to Checkout.
          const result = await stripe.redirectToCheckout({
            sessionId: session.id,
          });
          console.log(result);

          if (result.error) {
            // If `redirectToCheckout` fails due to a browser or network
            // error, display the localized error message to your customer
            alert(result.error.message);
          }
        }
      });
    });
  } else {
    console.log("Error loading Stripe");
  }
</script>
